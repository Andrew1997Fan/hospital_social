// Generated by gencpp from file walker_msgs/PushingActionTriggerRequest.msg
// DO NOT EDIT!


#ifndef WALKER_MSGS_MESSAGE_PUSHINGACTIONTRIGGERREQUEST_H
#define WALKER_MSGS_MESSAGE_PUSHINGACTIONTRIGGERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace walker_msgs
{
template <class ContainerAllocator>
struct PushingActionTriggerRequest_
{
  typedef PushingActionTriggerRequest_<ContainerAllocator> Type;

  PushingActionTriggerRequest_()
    : duration_in_seconds(0.0)  {
    }
  PushingActionTriggerRequest_(const ContainerAllocator& _alloc)
    : duration_in_seconds(0.0)  {
  (void)_alloc;
    }



   typedef float _duration_in_seconds_type;
  _duration_in_seconds_type duration_in_seconds;





  typedef boost::shared_ptr< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PushingActionTriggerRequest_

typedef ::walker_msgs::PushingActionTriggerRequest_<std::allocator<void> > PushingActionTriggerRequest;

typedef boost::shared_ptr< ::walker_msgs::PushingActionTriggerRequest > PushingActionTriggerRequestPtr;
typedef boost::shared_ptr< ::walker_msgs::PushingActionTriggerRequest const> PushingActionTriggerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator1> & lhs, const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.duration_in_seconds == rhs.duration_in_seconds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator1> & lhs, const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walker_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a5baff76f6275e472a6acb9653f2fd0";
  }

  static const char* value(const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a5baff76f6275e4ULL;
  static const uint64_t static_value2 = 0x72a6acb9653f2fd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walker_msgs/PushingActionTriggerRequest";
  }

  static const char* value(const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 duration_in_seconds\n"
;
  }

  static const char* value(const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.duration_in_seconds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PushingActionTriggerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walker_msgs::PushingActionTriggerRequest_<ContainerAllocator>& v)
  {
    s << indent << "duration_in_seconds: ";
    Printer<float>::stream(s, indent + "  ", v.duration_in_seconds);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKER_MSGS_MESSAGE_PUSHINGACTIONTRIGGERREQUEST_H
