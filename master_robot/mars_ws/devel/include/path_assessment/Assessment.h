// Generated by gencpp from file path_assessment/Assessment.msg
// DO NOT EDIT!


#ifndef PATH_ASSESSMENT_MESSAGE_ASSESSMENT_H
#define PATH_ASSESSMENT_MESSAGE_ASSESSMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace path_assessment
{
template <class ContainerAllocator>
struct Assessment_
{
  typedef Assessment_<ContainerAllocator> Type;

  Assessment_()
    : header()
    , stop(false)
    , t(0.0)
    , robot_x(0.0)
    , robot_y(0.0)
    , eva_cur_h(0.0)
    , idx_h(0)
    , eva_avg_h(0.0)
    , colli_t_h(0.0)
    , colli_h(0)
    , eva_cur_o(0.0)
    , idx_o(0)
    , eva_avg_o(0.0)
    , colli_t_o(0.0)
    , colli_o(0)  {
    }
  Assessment_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , stop(false)
    , t(0.0)
    , robot_x(0.0)
    , robot_y(0.0)
    , eva_cur_h(0.0)
    , idx_h(0)
    , eva_avg_h(0.0)
    , colli_t_h(0.0)
    , colli_h(0)
    , eva_cur_o(0.0)
    , idx_o(0)
    , eva_avg_o(0.0)
    , colli_t_o(0.0)
    , colli_o(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef float _t_type;
  _t_type t;

   typedef float _robot_x_type;
  _robot_x_type robot_x;

   typedef float _robot_y_type;
  _robot_y_type robot_y;

   typedef float _eva_cur_h_type;
  _eva_cur_h_type eva_cur_h;

   typedef int32_t _idx_h_type;
  _idx_h_type idx_h;

   typedef float _eva_avg_h_type;
  _eva_avg_h_type eva_avg_h;

   typedef float _colli_t_h_type;
  _colli_t_h_type colli_t_h;

   typedef int32_t _colli_h_type;
  _colli_h_type colli_h;

   typedef float _eva_cur_o_type;
  _eva_cur_o_type eva_cur_o;

   typedef int32_t _idx_o_type;
  _idx_o_type idx_o;

   typedef float _eva_avg_o_type;
  _eva_avg_o_type eva_avg_o;

   typedef float _colli_t_o_type;
  _colli_t_o_type colli_t_o;

   typedef int32_t _colli_o_type;
  _colli_o_type colli_o;





  typedef boost::shared_ptr< ::path_assessment::Assessment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_assessment::Assessment_<ContainerAllocator> const> ConstPtr;

}; // struct Assessment_

typedef ::path_assessment::Assessment_<std::allocator<void> > Assessment;

typedef boost::shared_ptr< ::path_assessment::Assessment > AssessmentPtr;
typedef boost::shared_ptr< ::path_assessment::Assessment const> AssessmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_assessment::Assessment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_assessment::Assessment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_assessment::Assessment_<ContainerAllocator1> & lhs, const ::path_assessment::Assessment_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.stop == rhs.stop &&
    lhs.t == rhs.t &&
    lhs.robot_x == rhs.robot_x &&
    lhs.robot_y == rhs.robot_y &&
    lhs.eva_cur_h == rhs.eva_cur_h &&
    lhs.idx_h == rhs.idx_h &&
    lhs.eva_avg_h == rhs.eva_avg_h &&
    lhs.colli_t_h == rhs.colli_t_h &&
    lhs.colli_h == rhs.colli_h &&
    lhs.eva_cur_o == rhs.eva_cur_o &&
    lhs.idx_o == rhs.idx_o &&
    lhs.eva_avg_o == rhs.eva_avg_o &&
    lhs.colli_t_o == rhs.colli_t_o &&
    lhs.colli_o == rhs.colli_o;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_assessment::Assessment_<ContainerAllocator1> & lhs, const ::path_assessment::Assessment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_assessment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_assessment::Assessment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_assessment::Assessment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_assessment::Assessment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_assessment::Assessment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_assessment::Assessment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_assessment::Assessment_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_assessment::Assessment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a26b44577f75cbfac39e4760f1366a24";
  }

  static const char* value(const ::path_assessment::Assessment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa26b44577f75cbfaULL;
  static const uint64_t static_value2 = 0xc39e4760f1366a24ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_assessment::Assessment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_assessment/Assessment";
  }

  static const char* value(const ::path_assessment::Assessment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_assessment::Assessment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool stop\n"
"float32 t\n"
"float32 robot_x\n"
"float32 robot_y\n"
"float32 eva_cur_h\n"
"int32 idx_h\n"
"float32 eva_avg_h\n"
"float32 colli_t_h\n"
"int32 colli_h\n"
"float32 eva_cur_o\n"
"int32 idx_o\n"
"float32 eva_avg_o\n"
"float32 colli_t_o\n"
"int32 colli_o\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::path_assessment::Assessment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_assessment::Assessment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.stop);
      stream.next(m.t);
      stream.next(m.robot_x);
      stream.next(m.robot_y);
      stream.next(m.eva_cur_h);
      stream.next(m.idx_h);
      stream.next(m.eva_avg_h);
      stream.next(m.colli_t_h);
      stream.next(m.colli_h);
      stream.next(m.eva_cur_o);
      stream.next(m.idx_o);
      stream.next(m.eva_avg_o);
      stream.next(m.colli_t_o);
      stream.next(m.colli_o);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Assessment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_assessment::Assessment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_assessment::Assessment_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "t: ";
    Printer<float>::stream(s, indent + "  ", v.t);
    s << indent << "robot_x: ";
    Printer<float>::stream(s, indent + "  ", v.robot_x);
    s << indent << "robot_y: ";
    Printer<float>::stream(s, indent + "  ", v.robot_y);
    s << indent << "eva_cur_h: ";
    Printer<float>::stream(s, indent + "  ", v.eva_cur_h);
    s << indent << "idx_h: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idx_h);
    s << indent << "eva_avg_h: ";
    Printer<float>::stream(s, indent + "  ", v.eva_avg_h);
    s << indent << "colli_t_h: ";
    Printer<float>::stream(s, indent + "  ", v.colli_t_h);
    s << indent << "colli_h: ";
    Printer<int32_t>::stream(s, indent + "  ", v.colli_h);
    s << indent << "eva_cur_o: ";
    Printer<float>::stream(s, indent + "  ", v.eva_cur_o);
    s << indent << "idx_o: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idx_o);
    s << indent << "eva_avg_o: ";
    Printer<float>::stream(s, indent + "  ", v.eva_avg_o);
    s << indent << "colli_t_o: ";
    Printer<float>::stream(s, indent + "  ", v.colli_t_o);
    s << indent << "colli_o: ";
    Printer<int32_t>::stream(s, indent + "  ", v.colli_o);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_ASSESSMENT_MESSAGE_ASSESSMENT_H
