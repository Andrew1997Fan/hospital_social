// Generated by gencpp from file detection_msgs/Track3D.msg
// DO NOT EDIT!


#ifndef DETECTION_MSGS_MESSAGE_TRACK3D_H
#define DETECTION_MSGS_MESSAGE_TRACK3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection_msgs
{
template <class ContainerAllocator>
struct Track3D_
{
  typedef Track3D_<ContainerAllocator> Type;

  Track3D_()
    : x(0.0)
    , y(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , yaw(0.0)
    , radius(0.0)
    , confidence(0.0)
    , class_id(0)
    , dangerous(0.0)  {
    }
  Track3D_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , yaw(0.0)
    , radius(0.0)
    , confidence(0.0)
    , class_id(0)
    , dangerous(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _vel_x_type;
  _vel_x_type vel_x;

   typedef float _vel_y_type;
  _vel_y_type vel_y;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int8_t _class_id_type;
  _class_id_type class_id;

   typedef float _dangerous_type;
  _dangerous_type dangerous;





  typedef boost::shared_ptr< ::detection_msgs::Track3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_msgs::Track3D_<ContainerAllocator> const> ConstPtr;

}; // struct Track3D_

typedef ::detection_msgs::Track3D_<std::allocator<void> > Track3D;

typedef boost::shared_ptr< ::detection_msgs::Track3D > Track3DPtr;
typedef boost::shared_ptr< ::detection_msgs::Track3D const> Track3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_msgs::Track3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_msgs::Track3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection_msgs::Track3D_<ContainerAllocator1> & lhs, const ::detection_msgs::Track3D_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.vel_x == rhs.vel_x &&
    lhs.vel_y == rhs.vel_y &&
    lhs.yaw == rhs.yaw &&
    lhs.radius == rhs.radius &&
    lhs.confidence == rhs.confidence &&
    lhs.class_id == rhs.class_id &&
    lhs.dangerous == rhs.dangerous;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection_msgs::Track3D_<ContainerAllocator1> & lhs, const ::detection_msgs::Track3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detection_msgs::Track3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_msgs::Track3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_msgs::Track3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_msgs::Track3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_msgs::Track3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_msgs::Track3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_msgs::Track3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "320ec20fd8002a93782dccfcbf591df4";
  }

  static const char* value(const ::detection_msgs::Track3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x320ec20fd8002a93ULL;
  static const uint64_t static_value2 = 0x782dccfcbf591df4ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_msgs::Track3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_msgs/Track3D";
  }

  static const char* value(const ::detection_msgs::Track3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_msgs::Track3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 vel_x\n"
"float32 vel_y\n"
"float32 yaw\n"
"float32 radius\n"
"float32 confidence\n"
"int8 class_id\n"
"float32 dangerous\n"
;
  }

  static const char* value(const ::detection_msgs::Track3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_msgs::Track3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.vel_x);
      stream.next(m.vel_y);
      stream.next(m.yaw);
      stream.next(m.radius);
      stream.next(m.confidence);
      stream.next(m.class_id);
      stream.next(m.dangerous);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_msgs::Track3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_msgs::Track3D_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<float>::stream(s, indent + "  ", v.vel_y);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "class_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "dangerous: ";
    Printer<float>::stream(s, indent + "  ", v.dangerous);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_MSGS_MESSAGE_TRACK3D_H
